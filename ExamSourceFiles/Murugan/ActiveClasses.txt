models.py

class ActiveClasses(models.Model):
    class_id = models.CharField(null=False, unique=True, max_length=30) #primary key
    tutor_id = models.IntegerField(null=False) #Comes from FuldemyUser table
    student_id =  models.IntegerField(null=False) #Comes from FuldemyUser table 
    skill_id = models.IntegerField(null=False)  #Comes from FuldemyUser table
    class_start_date = models.DateField(null=False) #Add current date
    class_review = models.CharField(max_length=255, null=True) #Updated from UI
    rating_by_student = models.IntegerField(null=True) #Updated from UI
    feedback_in_words = models.CharField(max_length=1000, null=True) #Updated from UI

-------------------------------------------------------------------

serializers.py

class ActiveClassesSerializer(serializers.ModelSerializer):
    class Meta:
        model = ActiveClasses
        fields = ['id','class_id','tutor_id','student_id','skill_id','class_start_date','class_review','rating_by_student','feedback_in_words']

class GetByTutorSerializer(serializers.ModelSerializer):
    class Meta:
        model = ActiveClasses
        fields =  ['id','class_id','tutor_id','student_id','skill_id','class_start_date','class_review','rating_by_student','feedback_in_words']

class CreateActiveClassesSerializer(serializers.ModelSerializer):
    class Meta:
        model = ActiveClasses
        fields = ['id','class_id','tutor_id','student_id','skill_id','class_start_date','class_review','rating_by_student','feedback_in_words']

class UpdateActiveClassesSerializer(serializers.ModelSerializer):
    code = serializers.CharField(validators=[])
    class Meta:
        model = ActiveClasses
        fields = ['id','class_id','tutor_id','skill_id','admin_id','class_start_date','skill_duration_left','class_description','rating_by_student','feedback_in_words']

-------------------------------------------------------------------

views.py

class ActiveClassesCreateView(generics.CreateAPIView):
    queryset = ActiveClasses.objects.all()
    serializer_class = ActiveClassesSerializer


class ActiveClassesView(APIView):
    def get(self,request, id=None):
        if id: 
            item = ActiveClasses.objects.get(class_id=id)
            serializer = ActiveClassesSerializer(item)
            return Response({"status": "success", "data": serializer.data}, status=status.HTTP_200_OK)
        queryset = ActiveClasses.objects.all()
        serializer_class = ActiveClassesSerializer(queryset,many=True)
        return Response(serializer_class.data)

    def post(self, request):
        serializer = ActiveClassesSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({"status": "success", "data": serializer.data}, status=status.HTTP_200_OK)
        else:
            return Response({"status": "error", "data": serializer.errors}, status=status.HTTP_400_BAD_REQUEST)
    def patch(self, request, id=None):
        item = ActiveClasses.objects.get(class_id=id)
        serializer = ActiveClassesSerializer(item, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response({"status": "success", "data": serializer.data})
        else:
            return Response({"status": "error", "data": serializer.errors})
    def delete(self, request, id=None):
        item = generics.get_object_or_404(ActiveClasses, class_id=id)
        item.delete()
        return Response({"status": "success", "data": "Item Deleted"})

class GetActiveClassesByTutor (APIView):
    def get(self,request, tutor_id=None):
        queryset = ActiveClasses.objects.filter(tutor_id=tutor_id)
        serializer_class_set = ActiveClassesSerializer(queryset,many=True)
        print(serializer_class_set.data)
        return Response(serializer_class_set.data)